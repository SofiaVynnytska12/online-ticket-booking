openapi: "3.0.2"
info:
  title: online-ticket-booking API
  version: "1.0"
servers:
  - url: https://localhost:3306/api/v1
    description: client server





paths:
  /users/registration:
    post:
      summary: resistrating new user
      operationId: registrateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '201':
          description: successfull registration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '403':
          description: 403 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '400':
          description: 400 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
  /users/{user_id}:
    get:
      summary: get a user by id
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '403':
          description: 403 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '404':
          description: 404 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: 500 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /users/getByUserName:
    get:
      summary: get a user by Name
      operationId: getUserByName
      parameters:
        - name: userName
          in: query
          required: true
          schema:
            type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '403':
          description: 403 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '404':
          description: 404 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: 500 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /users/getAll:
    get:
      summary: Get all users
      description: Fetches all users from the system.
      operationId: getAllUsers
      parameters:
        - name: sortBy
          in: query
          description: The field to sort by (e.g., username, email).
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order (ASC or DESC).
          schema:
            type: string
            enum: [ASC, DESC]
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersArray"
        '403':
          description: 403 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        '404':
          description: 404 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        '500':
          description: 500 error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"


components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    User:
      type: object
      required:
        - username
        - password
        - email
      properties:
        user_id:
          type: integer
        password:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
    UsersArray:
      type: array
      items:
        $ref: "#/components/schemas/User"


    ForbiddenError:
      type: object
      properties:
        code:
          type: integer
          example: 403
        message:
          type: string
          example: "Access to the resource is forbidden."
    NotFoundError:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "The requested resource is not found."
    BadRequestError:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Bad request. The request cannot be fulfilled due to bad syntax or other errors."
    InternalServerError:
      type: object
      properties:
        code:
          type: integer
          example: 500
        message:
          type: string
          example: Internal server error
